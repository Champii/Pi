// Generated by CoffeeScript 1.7.1
(function() {
  var bus, cookieParser, passportSocketIO, socket, sockets, _,
    __slice = [].slice;

  _ = require('underscore');

  socket = require('socket.io');

  passportSocketIO = require("passport.socketio");

  cookieParser = require('cookie-parser');

  bus = require('../bus');

  sockets = [];

  exports.init = function(server, store, passport) {
    var emitClient, io, onAuthorizeFail, onAuthorizeSuccess;
    io = socket.listen(server);
    onAuthorizeSuccess = function(data, accept) {
      return accept(null, true);
    };
    onAuthorizeFail = function(data, message, error, accept) {
      if (error) {
        return accept(new Error(message));
      }
      return accept(null, false);
    };
    io.use(passportSocketIO.authorize({
      passport: passport,
      cookieParser: cookieParser,
      key: 'pi',
      secret: 'pi',
      store: store,
      success: onAuthorizeSuccess,
      fail: onAuthorizeFail
    }));
    io.sockets.on('connection', function(socket) {
      socket.join('client-' + socket.request.user.id);
      return socket.once('disconnect', function() {});
    });
    bus.on('updateFile', function(file) {
      return emitClient(file.client_id, 'updateFile', file);
    });
    return emitClient = function() {
      var args, clientId;
      clientId = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return io.sockets["in"]('client-' + clientId).emit.apply(io.sockets["in"]('client-' + clientId), args);
    };
  };

}).call(this);
