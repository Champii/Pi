// Generated by CoffeeScript 1.7.1
(function() {
  var MakeAssetsList, Modulator, Processors, RedisStore, Resources, Routes, Sockets, app, async, bus, coffeeMiddleware, expressSession, fs, path, piRoot, sessionStore, _;

  _ = require('underscore');

  async = require('async');

  fs = require('fs');

  path = require('path');

  coffeeMiddleware = require('coffee-middleware');

  Modulator = require('./Modulator');

  bus = require('./server/bus');

  Resources = require('./server/resources');

  Routes = require('./server/routes');

  Sockets = require('./server/socket/socket');

  Processors = require('./server/processors');

  expressSession = require('express-session');

  RedisStore = require('connect-redis')(expressSession);

  app = Modulator.app;

  MakeAssetsList = function() {
    var assets, assetsCoffee, assetsCss, assetsLib;
    assets = {};
    assetsCoffee = require('./settings/assets.json');
    assetsLib = require('./settings/assets-lib.json');
    assetsCss = require('./settings/assets-css.json');
    assets['/js/pi.min.js'] = assetsLib.concat(assetsCoffee);
    assets['/css/pi.min.css'] = assetsCss;
    return assets;
  };

  piRoot = path.resolve(__dirname, '.');

  app.use(coffeeMiddleware({
    src: path.resolve(piRoot, 'public'),
    prefix: 'js',
    bare: true,
    force: true
  }));

  app.use(require('connect-cachify').setup(MakeAssetsList(), {
    root: path.join(piRoot, 'public'),
    production: false
  }));

  app.use(Modulator.express["static"](path.resolve(piRoot, 'public')));

  sessionStore = new RedisStore({
    host: 'localhost'
  });

  app.use(expressSession({
    key: 'pi',
    secret: 'pi',
    store: sessionStore,
    resave: true,
    saveUninitialized: true
  }));

  app.set('views', path.resolve(piRoot, 'public/views'));

  app.engine('.jade', require('jade').__express);

  app.set('view engine', 'jade');

  Resources.mount();

  Routes.mount(app);

  Sockets.init(Modulator.server, sessionStore, Modulator.passport);

  Processors.init();

}).call(this);
